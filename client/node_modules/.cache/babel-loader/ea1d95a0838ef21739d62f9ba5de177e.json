{"ast":null,"code":"import { Trie } from '@wry/trie';\nexport { Trie as KeyTrie } from '@wry/trie';\nimport { Slot } from '@wry/context';\nexport { asyncFromGen, bind as bindContext, noContext, setTimeout } from '@wry/context';\n\nfunction defaultDispose() {}\n\nvar Cache =\n/** @class */\nfunction () {\n  function Cache(max, dispose) {\n    if (max === void 0) {\n      max = Infinity;\n    }\n\n    if (dispose === void 0) {\n      dispose = defaultDispose;\n    }\n\n    this.max = max;\n    this.dispose = dispose;\n    this.map = new Map();\n    this.newest = null;\n    this.oldest = null;\n  }\n\n  Cache.prototype.has = function (key) {\n    return this.map.has(key);\n  };\n\n  Cache.prototype.get = function (key) {\n    var node = this.getNode(key);\n    return node && node.value;\n  };\n\n  Cache.prototype.getNode = function (key) {\n    var node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      var older = node.older,\n          newer = node.newer;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older.newer = node;\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  };\n\n  Cache.prototype.set = function (key, value) {\n    var node = this.getNode(key);\n\n    if (node) {\n      return node.value = value;\n    }\n\n    node = {\n      key: key,\n      value: value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n    this.map.set(key, node);\n    return node.value;\n  };\n\n  Cache.prototype.clean = function () {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  };\n\n  Cache.prototype.delete = function (key) {\n    var node = this.map.get(key);\n\n    if (node) {\n      if (node === this.newest) {\n        this.newest = node.older;\n      }\n\n      if (node === this.oldest) {\n        this.oldest = node.newer;\n      }\n\n      if (node.newer) {\n        node.newer.older = node.older;\n      }\n\n      if (node.older) {\n        node.older.newer = node.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(node.value, key);\n      return true;\n    }\n\n    return false;\n  };\n\n  return Cache;\n}();\n\nvar parentEntrySlot = new Slot();\n\nfunction maybeUnsubscribe(entryOrDep) {\n  var unsubscribe = entryOrDep.unsubscribe;\n\n  if (typeof unsubscribe === \"function\") {\n    entryOrDep.unsubscribe = void 0;\n    unsubscribe();\n  }\n}\n\nvar emptySetPool = [];\nvar POOL_TARGET_SIZE = 100; // Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\n\nfunction assert(condition, optionalMessage) {\n  if (!condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\nfunction valueIs(a, b) {\n  var len = a.length;\n  return (// Unknown values are not equal to each other.\n    len > 0 && // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length && // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet(value) {\n  switch (value.length) {\n    case 0:\n      throw new Error(\"unknown value\");\n\n    case 1:\n      return value[0];\n\n    case 2:\n      throw value[1];\n  }\n}\n\nfunction valueCopy(value) {\n  return value.slice(0);\n}\n\nvar Entry =\n/** @class */\nfunction () {\n  function Entry(fn) {\n    this.fn = fn;\n    this.parents = new Set();\n    this.childValues = new Map(); // When this Entry has children that are dirty, this property becomes\n    // a Set containing other Entry objects, borrowed from emptySetPool.\n    // When the set becomes empty, it gets recycled back to emptySetPool.\n\n    this.dirtyChildren = null;\n    this.dirty = true;\n    this.recomputing = false;\n    this.value = [];\n    this.deps = null;\n    ++Entry.count;\n  }\n\n  Entry.prototype.peek = function () {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      return this.value[0];\n    }\n  }; // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n\n\n  Entry.prototype.recompute = function (args) {\n    assert(!this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this) ? reallyRecompute(this, args) : valueGet(this.value);\n  };\n\n  Entry.prototype.setDirty = function () {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this);\n    forgetChildren(this); // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n\n    maybeUnsubscribe(this);\n  };\n\n  Entry.prototype.dispose = function () {\n    var _this = this;\n\n    forgetChildren(this);\n    maybeUnsubscribe(this); // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n\n    this.parents.forEach(function (parent) {\n      parent.setDirty();\n      forgetChild(parent, _this);\n    });\n  };\n\n  Entry.prototype.dependOn = function (dep) {\n    dep.add(this);\n\n    if (!this.deps) {\n      this.deps = emptySetPool.pop() || new Set();\n    }\n\n    this.deps.add(dep);\n  };\n\n  Entry.prototype.forgetDeps = function () {\n    var _this = this;\n\n    if (this.deps) {\n      this.deps.forEach(function (dep) {\n        return dep.delete(_this);\n      });\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  };\n\n  Entry.count = 0;\n  return Entry;\n}();\n\nfunction rememberParent(child) {\n  var parent = parentEntrySlot.getValue();\n\n  if (parent) {\n    child.parents.add(parent);\n\n    if (!parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry, args) {\n  forgetChildren(entry); // Set entry as the parent entry while calling recomputeNewValue(entry).\n\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n\n  if (maybeSubscribe(entry, args)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry, args) {\n  entry.recomputing = true; // Set entry.value as unknown.\n\n  entry.value.length = 0;\n\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  } // Either way, this line is always reached.\n\n\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child) {\n  child.parents.forEach(function (parent) {\n    return reportDirtyChild(parent, child);\n  });\n}\n\nfunction reportClean(child) {\n  child.parents.forEach(function (parent) {\n    return reportCleanChild(parent, child);\n  });\n} // Let a parent Entry know that one of its children may be dirty.\n\n\nfunction reportDirtyChild(parent, child) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n\n  if (!parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set();\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child);\n  reportDirty(parent);\n} // Let a parent Entry know that one of its children is no longer dirty.\n\n\nfunction reportCleanChild(parent, child) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(!mightBeDirty(child));\n  var childValue = parent.childValues.get(child);\n\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (!valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent, child) {\n  var dc = parent.dirtyChildren;\n\n  if (dc) {\n    dc.delete(child);\n\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n\n      parent.dirtyChildren = null;\n    }\n  }\n} // Removes all children from this entry and returns an array of the\n// removed children.\n\n\nfunction forgetChildren(parent) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach(function (_value, child) {\n      forgetChild(parent, child);\n    });\n  } // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n\n\n  parent.forgetDeps(); // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n\n  assert(parent.dirtyChildren === null);\n}\n\nfunction forgetChild(parent, child) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry, args) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n\n      entry.unsubscribe = entry.subscribe.apply(null, args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  } // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n\n\n  return true;\n}\n\nfunction dep(options) {\n  var depsByKey = new Map();\n  var subscribe = options && options.subscribe;\n\n  function depend(key) {\n    var parent = parentEntrySlot.getValue();\n\n    if (parent) {\n      var dep_1 = depsByKey.get(key);\n\n      if (!dep_1) {\n        depsByKey.set(key, dep_1 = new Set());\n      }\n\n      parent.dependOn(dep_1);\n\n      if (typeof subscribe === \"function\") {\n        maybeUnsubscribe(dep_1);\n        dep_1.unsubscribe = subscribe(key);\n      }\n    }\n  }\n\n  depend.dirty = function dirty(key) {\n    var dep = depsByKey.get(key);\n\n    if (dep) {\n      dep.forEach(function (entry) {\n        return entry.setDirty();\n      });\n      depsByKey.delete(key);\n      maybeUnsubscribe(dep);\n    }\n  };\n\n  return depend;\n} // The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\n\n\nvar keyTrie = new Trie(typeof WeakMap === \"function\");\n\nfunction defaultMakeCacheKey() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return keyTrie.lookupArray(args);\n}\n\nvar caches = new Set();\n\nfunction wrap(originalFunction, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n\n  var cache = new Cache(options.max || Math.pow(2, 16), function (entry) {\n    return entry.dispose();\n  });\n  var keyArgs = options.keyArgs;\n  var makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;\n\n  function optimistic() {\n    var key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);\n\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments);\n    }\n\n    var entry = cache.get(key);\n\n    if (!entry) {\n      cache.set(key, entry = new Entry(originalFunction));\n      entry.subscribe = options.subscribe;\n    }\n\n    var value = entry.recompute(Array.prototype.slice.call(arguments)); // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n\n    cache.set(key, entry);\n    caches.add(cache); // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n\n    if (!parentEntrySlot.hasValue()) {\n      caches.forEach(function (cache) {\n        return cache.clean();\n      });\n      caches.clear();\n    }\n\n    return value;\n  }\n\n  function lookup() {\n    var key = makeCacheKey.apply(null, arguments);\n\n    if (key !== void 0) {\n      return cache.get(key);\n    }\n  }\n\n  optimistic.dirty = function () {\n    var entry = lookup.apply(null, arguments);\n\n    if (entry) {\n      entry.setDirty();\n    }\n  };\n\n  optimistic.peek = function () {\n    var entry = lookup.apply(null, arguments);\n\n    if (entry) {\n      return entry.peek();\n    }\n  };\n\n  optimistic.forget = function () {\n    var key = makeCacheKey.apply(null, arguments);\n    return key !== void 0 && cache.delete(key);\n  };\n\n  return optimistic;\n}\n\nexport { defaultMakeCacheKey, dep, wrap };","map":{"version":3,"mappings":"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","names":["defaultDispose","max","dispose","Map","Cache","key","map","has","node","getNode","value","get","newest","newer","older","oldest","set","size","delete","parentEntrySlot","Slot","maybeUnsubscribe","entryOrDep","unsubscribe","emptySetPool","POOL_TARGET_SIZE","assert","condition","optionalMessage","Error","valueIs","a","b","len","length","valueGet","valueCopy","slice","fn","Set","Entry","count","mightBeDirty","args","recomputing","rememberParent","reallyRecompute","dirty","reportDirty","forgetChildren","parents","forEach","parent","setDirty","forgetChild","_this","dep","add","deps","pop","clear","push","child","getValue","childValues","reportDirtyChild","reportCleanChild","entry","withValue","recomputeNewValue","maybeSubscribe","setClean","apply","e","dirtyChildren","reportClean","childValue","removeDirtyChild","dc","_value","forgetDeps","subscribe","options","depsByKey","depend","dep_1","dependOn","keyTrie","Trie","WeakMap","defaultMakeCacheKey","lookupArray","caches","wrap","originalFunction","Object","create","cache","Math","pow","keyArgs","makeCacheKey","optimistic","arguments","recompute","Array","prototype","call","hasValue","clean","lookup","peek","forget"],"sources":["../src/cache.ts","../src/context.ts","../src/helpers.ts","../src/entry.ts","../src/dep.ts","../src/index.ts"],"sourcesContent":["interface Node<K, V> {\n  key: K;\n  value: V;\n  newer: Node<K, V> | null;\n  older: Node<K, V> | null;\n}\n\nfunction defaultDispose() {}\n\nexport class Cache<K = any, V = any> {\n  private map = new Map<K, Node<K, V>>();\n  private newest: Node<K, V> | null = null;\n  private oldest: Node<K, V> | null = null;\n\n  constructor(\n    private max = Infinity,\n    public dispose: (value: V, key: K) => void = defaultDispose,\n  ) {}\n\n  public has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  public get(key: K): V | undefined {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n\n  private getNode(key: K): Node<K, V> | undefined {\n    const node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      const { older, newer } = node;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older!.newer = node;\n\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  }\n\n  public set(key: K, value: V): V {\n    let node = this.getNode(key);\n    if (node) {\n      return node.value = value;\n    }\n\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n\n    this.map.set(key, node);\n\n    return node.value;\n  }\n\n  public clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n\n  public delete(key: K): boolean {\n    const node = this.map.get(key);\n    if (node) {\n      if (node === this.newest) {\n        this.newest = node.older;\n      }\n\n      if (node === this.oldest) {\n        this.oldest = node.newer;\n      }\n\n      if (node.newer) {\n        node.newer.older = node.older;\n      }\n\n      if (node.older) {\n        node.older.newer = node.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(node.value, key);\n\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { AnyEntry } from \"./entry\";\nimport { Slot } from \"@wry/context\";\n\nexport const parentEntrySlot = new Slot<AnyEntry>();\n\nexport {\n  bind as bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"@wry/context\";\n","export type Unsubscribable = {\n  unsubscribe?: void | (() => any);\n}\n\nexport function maybeUnsubscribe(entryOrDep: Unsubscribable) {\n  const { unsubscribe } = entryOrDep;\n  if (typeof unsubscribe === \"function\") {\n    entryOrDep.unsubscribe = void 0;\n    unsubscribe();\n  }\n}\n","import { parentEntrySlot } from \"./context\";\nimport { OptimisticWrapOptions } from \"./index\";\nimport { Dep } from \"./dep\";\nimport { maybeUnsubscribe, Unsubscribable } from \"./helpers\";\n\nconst emptySetPool: Set<any>[] = [];\nconst POOL_TARGET_SIZE = 100;\n\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition: any, optionalMessage?: string) {\n  if (! condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\n// Since exceptions are cached just like normal values, we need an efficient\n// way of representing unknown, ordinary, and exceptional values.\ntype Value<T> =\n  | []           // unknown\n  | [T]          // known value\n  | [void, any]; // known exception\n\nfunction valueIs(a: Value<any>, b: Value<any>) {\n  const len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet<T>(value: Value<T>): T {\n  switch (value.length) {\n    case 0: throw new Error(\"unknown value\");\n    case 1: return value[0];\n    case 2: throw value[1];\n  }\n}\n\nfunction valueCopy<T>(value: Value<T>): Value<T> {\n  return value.slice(0) as Value<T>;\n}\n\nexport type AnyEntry = Entry<any, any>;\n\nexport class Entry<TArgs extends any[], TValue> {\n  public static count = 0;\n\n  public subscribe: OptimisticWrapOptions<TArgs>[\"subscribe\"];\n  public unsubscribe: Unsubscribable[\"unsubscribe\"];\n\n  public readonly parents = new Set<AnyEntry>();\n  public readonly childValues = new Map<AnyEntry, Value<any>>();\n\n  // When this Entry has children that are dirty, this property becomes\n  // a Set containing other Entry objects, borrowed from emptySetPool.\n  // When the set becomes empty, it gets recycled back to emptySetPool.\n  public dirtyChildren: Set<AnyEntry> | null = null;\n\n  public dirty = true;\n  public recomputing = false;\n  public readonly value: Value<TValue> = [];\n\n  constructor(\n    public readonly fn: (...args: TArgs) => TValue,\n  ) {\n    ++Entry.count;\n  }\n\n  public peek(): TValue | undefined {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      return this.value[0];\n    }\n  }\n\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  public recompute(args: TArgs): TValue {\n    assert(! this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this)\n      ? reallyRecompute(this, args)\n      : valueGet(this.value);\n  }\n\n  public setDirty() {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this);\n    forgetChildren(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  }\n\n  public dispose() {\n    forgetChildren(this);\n    maybeUnsubscribe(this);\n\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    this.parents.forEach(parent => {\n      parent.setDirty();\n      forgetChild(parent, this);\n    });\n  }\n\n  private deps: Set<Dep<any>> | null = null;\n\n  public dependOn(dep: Dep<any>) {\n    dep.add(this);\n    if (! this.deps) {\n      this.deps = emptySetPool.pop() || new Set<Set<AnyEntry>>();\n    }\n    this.deps.add(dep);\n  }\n\n  public forgetDeps() {\n    if (this.deps) {\n      this.deps.forEach(dep => dep.delete(this));\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  }\n}\n\nfunction rememberParent(child: AnyEntry) {\n  const parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n\n    if (! parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry: AnyEntry, args: any[]) {\n  forgetChildren(entry);\n\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n\n  if (maybeSubscribe(entry, args)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry: AnyEntry, args: any[]) {\n  entry.recomputing = true;\n  // Set entry.value as unknown.\n  entry.value.length = 0;\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  }\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry: AnyEntry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry: AnyEntry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child: AnyEntry) {\n  child.parents.forEach(parent => reportDirtyChild(parent, child));\n}\n\nfunction reportClean(child: AnyEntry) {\n  child.parents.forEach(parent => reportCleanChild(parent, child));\n}\n\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n\n  if (! parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set;\n\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child);\n  reportDirty(parent);\n}\n\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(! mightBeDirty(child));\n\n  const childValue = parent.childValues.get(child)!;\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (! valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  const dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent: AnyEntry) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach((_value, child) => {\n      forgetChild(parent, child);\n    });\n  }\n\n  // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n  parent.forgetDeps();\n\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n}\n\nfunction forgetChild(parent: AnyEntry, child: AnyEntry) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry: AnyEntry, args: any[]) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}\n","import { AnyEntry } from \"./entry\";\nimport { OptimisticWrapOptions } from \"./index\";\nimport { parentEntrySlot } from \"./context\";\nimport { Unsubscribable, maybeUnsubscribe } from \"./helpers\";\n\nexport type OptimisticDependencyFunction<TKey> =\n  ((key: TKey) => void) & {\n    dirty: (key: TKey) => void;\n  };\n\nexport type Dep<TKey> = Set<AnyEntry> & {\n  subscribe: OptimisticWrapOptions<[TKey]>[\"subscribe\"];\n} & Unsubscribable;\n\nexport function dep<TKey>(options?: {\n  subscribe: Dep<TKey>[\"subscribe\"];\n}) {\n  const depsByKey = new Map<TKey, Dep<TKey>>();\n  const subscribe = options && options.subscribe;\n\n  function depend(key: TKey) {\n    const parent = parentEntrySlot.getValue();\n    if (parent) {\n      let dep = depsByKey.get(key);\n      if (!dep) {\n        depsByKey.set(key, dep = new Set as Dep<TKey>);\n      }\n      parent.dependOn(dep);\n      if (typeof subscribe === \"function\") {\n        maybeUnsubscribe(dep);\n        dep.unsubscribe = subscribe(key);\n      }\n    }\n  }\n\n  depend.dirty = function dirty(key: TKey) {\n    const dep = depsByKey.get(key);\n    if (dep) {\n      dep.forEach(entry => entry.setDirty());\n      depsByKey.delete(key);\n      maybeUnsubscribe(dep);\n    }\n  };\n\n  return depend as OptimisticDependencyFunction<TKey>;\n}\n","import { Trie } from \"@wry/trie\";\n\nimport { Cache } from \"./cache\";\nimport { Entry, AnyEntry } from \"./entry\";\nimport { parentEntrySlot } from \"./context\";\n\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport {\n  bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"./context\";\n\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\nexport { dep, OptimisticDependencyFunction } from \"./dep\";\n\n// Since the Cache uses a Map internally, any value or object reference can\n// be safely used as a key, though common types include object and string.\nexport type TCacheKey = any;\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nconst keyTrie = new Trie<TCacheKey>(typeof WeakMap === \"function\");\nexport function defaultMakeCacheKey(...args: any[]) {\n  return keyTrie.lookupArray(args);\n}\n\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { Trie as KeyTrie }\n\nexport type OptimisticWrapperFunction<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n> = ((...args: TArgs) => TResult) & {\n  // The .dirty(...) method of an optimistic function takes exactly the\n  // same parameter types as the original function.\n  dirty: (...args: TKeyArgs) => void;\n  // Examine the current value without recomputing it.\n  peek: (...args: TKeyArgs) => TResult | undefined;\n  // Remove the entry from the cache, dirtying any parent entries.\n  forget: (...args: TKeyArgs) => boolean;\n};\n\nexport type OptimisticWrapOptions<\n  TArgs extends any[],\n  TKeyArgs extends any[] = TArgs,\n> = {\n  // The maximum number of cache entries that should be retained before the\n  // cache begins evicting the oldest ones.\n  max?: number;\n  // Transform the raw arguments to some other type of array, which will then\n  // be passed to makeCacheKey.\n  keyArgs?: (...args: TArgs) => TKeyArgs;\n  // The makeCacheKey function takes the same arguments that were passed to\n  // the wrapper function and returns a single value that can be used as a key\n  // in a Map to identify the cached result.\n  makeCacheKey?: (...args: TKeyArgs) => TCacheKey;\n  // If provided, the subscribe function should either return an unsubscribe\n  // function or return nothing.\n  subscribe?: (...args: TArgs) => void | (() => any);\n};\n\nconst caches = new Set<Cache<TCacheKey, AnyEntry>>();\n\nexport function wrap<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n>(\n  originalFunction: (...args: TArgs) => TResult,\n  options: OptimisticWrapOptions<TArgs, TKeyArgs> = Object.create(null),\n) {\n  const cache = new Cache<TCacheKey, Entry<TArgs, TResult>>(\n    options.max || Math.pow(2, 16),\n    entry => entry.dispose(),\n  );\n\n  const keyArgs = options.keyArgs;\n  const makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;\n\n  function optimistic(): TResult {\n    const key = makeCacheKey.apply(\n      null,\n      keyArgs ? keyArgs.apply(null, arguments as any) : arguments as any\n    );\n\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments as any);\n    }\n\n    let entry = cache.get(key)!;\n    if (!entry) {\n      cache.set(key, entry = new Entry(originalFunction));\n      entry.subscribe = options.subscribe;\n    }\n\n    const value = entry.recompute(\n      Array.prototype.slice.call(arguments) as TArgs,\n    );\n\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n\n    caches.add(cache);\n\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (! parentEntrySlot.hasValue()) {\n      caches.forEach(cache => cache.clean());\n      caches.clear();\n    }\n\n    return value;\n  }\n\n  function lookup(): Entry<TArgs, TResult> | undefined {\n    const key = makeCacheKey.apply(null, arguments as any);\n    if (key !== void 0) {\n      return cache.get(key);\n    }\n  }\n\n  optimistic.dirty = function () {\n    const entry = lookup.apply(null, arguments as any);\n    if (entry) {\n      entry.setDirty();\n    }\n  };\n\n  optimistic.peek = function () {\n    const entry = lookup.apply(null, arguments as any);\n    if (entry) {\n      return entry.peek();\n    }\n  };\n\n  optimistic.forget = function () {\n    const key = makeCacheKey.apply(null, arguments as any);\n    return key !== void 0 && cache.delete(key);\n  };\n\n  return optimistic as OptimisticWrapperFunction<TArgs, TResult, TKeyArgs>;\n}\n"]},"metadata":{},"sourceType":"module"}